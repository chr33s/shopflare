name: Cloudflare

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

on:
  push:
    branches: [main]
    tags: [releases/*]

env:
  WRANGLER_SEND_METRICS: false

jobs:
  build:
    name: Build
    if: ${{ !contains(github.event.head_commit.message, '[skip-ci]') }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: "package.json"
          cache: "npm"
      - run: npm ci
      - run: npm run build --ignore-scripts
        env:
          SHOPIFY_API_KEY: ${{ vars.SHOPIFY_API_KEY }}
      - run: npm test
      - uses: actions/upload-artifact@v4
        with:
          name: build
          path: build

  preview:
    name: Preview
    if: ${{ github.ref_type == 'branch' }}
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build
      - uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          command: versions upload --message=${{ github.ref_name }} --tag=${{ github.sha }}

  deploy:
    name: Deploy
    if: ${{ github.ref_type == 'tag' }}
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build
      - uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          command: versions deploy --message=${{ github.ref_name }} --yes
      - uses: actions/github-script@v7
        if: ${{ vars.SHOPIFY_APP_URL != '' }}
        env:
          SHOPIFY_APP_URL: ${{ vars.SHOPIFY_APP_URL }}
        with:
          script: |
            const url = process.env.SHOPIFY_APP_URL;
            const count = 5;

            const primed = await fetch(url).then(() => true).catch(() => false); // <-- prime origin
            if (!primed) {
              throw new Error("origin not reachable");
            }

            const values = await Promise.allSettled(
              [...Array(count).keys()].map(async () => {
                return fetch(url).then((res) => {
                  if (!res.ok) {
                    throw new Error(`request failed with status ${res.status}`);
                  }
                  const header = res.headers.get("server-timing");
                  const desc = header.replace(/^cfL4;desc="|"$/, "");
                  const params = new URLSearchParams(desc);
                  const rtt = params.get("rtt");
                  return Number(rtt);
                });
              }),
            );
            const average = values.reduce((acc, { value }) => acc + value, 0) / count;
            if (average > 100_000) {
              throw new Error("100ms threshold exceeded")
            }

  rollback:
    name: Rollback
    if: ${{ failure() && needs.deploy.result == 'failure' }}
    needs: deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          command: rollback deploy --message=${{ github.ref_name }}
